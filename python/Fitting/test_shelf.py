from unittest import TestCase
import pickle

import numpy as np

import shelf

__author__ = 'maxwallace'


class TestShelf(TestCase):
    poly = shelf.Shelf

    def setUp(self):
        self.poly = self.create_shelf(self.loadpickle('args'))
        self.poly.photoelectrons()

    def create_shelf(self, args):
        """the routine that is multiprocessed, the true guts of the program"""
        # a list is passed since multiprocessing.pool only accepts a single argument per processes
        shelf_id, SHOT, param, calib, voltage, vdac, times = args
        poly = shelf.Shelf(shelf_id, SHOT, param, calib, voltage, vdac, times)
        return poly

    def test_photon_fit_Ne_valuesAsExpected(self):
        knownNe = [3.97988057e+12, 4.11835281e+12, 5.58449743e+12,
                   6.40817706e+12, 9.19949227e+12, 1.10746767e+13,
                   1.39967603e+13, 1.43354654e+13, 1.66479582e+13,
                   1.59293090e+13, 1.96541527e+13, 2.00978410e+13,
                   2.39626552e+13, 2.32517587e+13, 2.69264436e+13,
                   2.26802328e+13, 2.52800592e+13, 2.17260446e+13,
                   2.55272835e+13, 2.20264548e+13, 2.34591488e+13,
                   2.05990239e+13, 2.35990964e+13, 1.74606725e+13,
                   1.98292599e+13, 1.75320991e+13, 1.93718237e+13,
                   1.71432204e+13, 1.95083539e+13, 1.69346191e+13,
                   1.89623989e+13, 1.70500039e+13, 1.80182366e+13,
                   1.53638005e+13, 1.98079839e+13, 1.88804488e+13,
                   2.37843675e+13, 2.30203964e+13, 2.54769258e+13,
                   3.12058832e+13, 2.40031135e+13, 2.44984516e+13]
        self.poly.photon_fit()

        self.assertTrue(np.allclose(self.poly.ne, knownNe))

    def test_photon_fit_Ne_error_valuesAsExpected(self):
        knownNe_error = [2.11227220e+11, 1.86210242e+11, 3.06474335e+11,
                         3.54638815e+11, 2.19072064e+11, 6.32862269e+11,
                         8.20374247e+11, 5.91668305e+11, 5.43931758e+11,
                         6.04540070e+11, 5.67031123e+11, 6.01230973e+11,
                         7.76371648e+11, 4.27578895e+11, 5.86317254e+11,
                         5.18568977e+11, 4.99883779e+11, 4.69643707e+11,
                         7.30810591e+11, 4.26678379e+11, 5.77200134e+11,
                         4.20256075e+11, 4.54356043e+11, 4.81834660e+11,
                         4.79704137e+11, 2.93935396e+11, 5.29228665e+11,
                         4.23550805e+11, 3.57205869e+11, 3.80602000e+11,
                         4.22107811e+11, 4.52455140e+11, 4.88320842e+11,
                         2.85027967e+11, 5.38248252e+11, 3.38958995e+11,
                         5.36362992e+11, 5.00059298e+11, 5.04157547e+11,
                         3.41652845e+12, 7.23113437e+11, 1.92266278e+12]
        self.poly.photon_fit()

        self.assertTrue(np.allclose(self.poly.ne_error, knownNe_error))

    def test_photon_fit_Te_valuesAsExpected(self):
        knownTe = [0.01482608, 0.04693883, 0.07952711, 0.13255483, 0.19272205,
                   0.27245635, 0.31518656, 0.31813617, 0.36190176, 0.41702812,
                   0.47470818, 0.46878968, 0.56646724, 0.68485457, 0.95937591,
                   0.81477321, 0.8994289, 0.99806146, 1.25236959, 1.10766692,
                   1.21275341, 1.16588101, 1.15755014, 1.06352596, 1.09668084,
                   1.07304799, 1.14706717, 1.14334928, 1.28352763, 1.3785052,
                   1.37833247, 1.29647209, 0.73493836, 0.76650927, 1.01987109,
                   1.10760717, 1.1420678, 1.1262104, 1.07685441, 0.0632094,
                   0.24434756, 0.07132272]
        self.poly.photon_fit()

        self.assertTrue(np.allclose(self.poly.Te, knownTe))

    def test_photon_fit_Te_error_valuesAsExpected(self):
        knownTe_error = [0.00087947, 0.0031695, 0.00660954, 0.00850789, 0.00416641,
                         0.02108479, 0.02668821, 0.01846838, 0.0154779, 0.02176412,
                         0.01429641, 0.01562843, 0.01569309, 0.0068087, 0.01449045,
                         0.01304054, 0.01076518, 0.0152891, 0.03343677, 0.01393408,
                         0.02544942, 0.01705251, 0.01465602, 0.02511195, 0.02126247,
                         0.00819722, 0.02734183, 0.02367624, 0.01496886, 0.02672297,
                         0.02615037, 0.03179662, 0.01524802, 0.00794177, 0.02279461,
                         0.01125635, 0.02003201, 0.01835617, 0.01399347, 0.01202627,
                         0.00845562, 0.00669983]

        self.poly.photon_fit()

        self.assertTrue(np.allclose(self.poly.Te_error, knownTe_error))

    def test_photon_fit_Pe_valuesAsExpected(self):
        knownPe = [0.00945276, 0.03096837, 0.07114785, 0.13607946, 0.2840258,
                   0.48338203, 0.70673684, 0.73061293, 0.96519305, 1.06420377,
                   1.49466392, 1.50935001, 2.17456429, 2.55103653, 4.13837951,
                   2.96037524, 3.64256605, 3.47376522, 5.12152889, 3.90855567,
                   4.55771605, 3.84736493, 4.3762054, 2.97489452, 3.48376838,
                   3.01380793, 3.55976943, 3.14003033, 4.01132971, 3.73978257,
                   4.18706572, 3.54119763, 2.12141538, 1.88659459, 3.23629475,
                   3.35012169, 4.3515703, 4.15331473, 4.39507736, 0.31599534,
                   0.93958936, 0.27991685]

        self.poly.photon_fit()

        self.assertTrue(np.allclose(self.poly.Pe, knownPe))

    def test_photon_fit_Pe_error_valuesAsExpected(self):
        knownPe_error = [0.0007524, 0.00251662, 0.00708596, 0.0115325, 0.0091351,
                         0.0465013, 0.07278043, 0.05204036, 0.05194693, 0.06867177,
                         0.06233544, 0.06760692, 0.09269845, 0.05332818, 0.10966884,
                         0.08262273, 0.08419445, 0.09203471, 0.20048829, 0.09027753,
                         0.14738721, 0.09658031, 0.10084181, 0.10804367, 0.10800441,
                         0.05552618, 0.12906431, 0.10122541, 0.08708187, 0.11099739,
                         0.12246529, 0.12795977, 0.07240657, 0.04008839, 0.11386664,
                         0.06911235, 0.12432145, 0.1127932, 0.10404923, 0.06936497,
                         0.04310926, 0.03426368]

        self.poly.photon_fit()

        self.assertTrue(np.allclose(self.poly.Pe_error, knownPe_error))

    def test_photon_fit_Photoelectrons_Nsc_valuesAsExpected(self):
        knownNsc = [[4.20055995e+01, -2.31913686e+01, -2.31913686e+01,
                     -1.53572870e+02, 1.07202567e+02, -1.53572870e+02,
                     4.20055995e+01, 2.37596503e+02, 7.59159813e+02,
                     8.89553749e+02, 2.06306187e+03, 1.80228643e+03,
                     4.21451207e+03, 5.58362353e+03, 1.42546213e+04,
                     7.80027070e+03, 1.20379741e+04, 1.07992566e+04,
                     2.07089719e+04, 1.28855223e+04, 1.81011554e+04,
                     1.31462977e+04, 1.69928318e+04, 9.62574850e+03,
                     1.30811008e+04, 9.88652394e+03, 1.36678610e+04,
                     1.05384812e+04, 1.63408746e+04, 1.37982550e+04,
                     1.71884227e+04, 1.25595375e+04, 5.77921443e+03,
                     4.67089085e+03, 1.16468048e+04, 1.09948475e+04,
                     1.67320439e+04, 1.38634519e+04, 1.64060715e+04,
                     -8.83883366e+01, 6.28765877e+02, -3.49163774e+02],
                    [-2.91655587e+01, 1.61291759e+01, 3.78478414e+02,
                     1.60141033e+03, 4.90784820e+03, 8.25958081e+03,
                     1.40118825e+04, 1.26530750e+04, 1.87677217e+04,
                     1.78618443e+04, 2.70111733e+04, 2.38406153e+04,
                     3.62510875e+04, 3.26275908e+04, 4.65327547e+04,
                     3.30805295e+04, 4.37245459e+04, 3.27181803e+04,
                     4.47663032e+04, 3.39864026e+04, 4.13239812e+04,
                     3.16311282e+04, 4.12786864e+04, 2.69205838e+04,
                     3.49375704e+04, 2.67394092e+04, 3.45299265e+04,
                     2.64223547e+04, 3.50734503e+04, 2.68299987e+04,
                     3.37599333e+04, 2.66488241e+04, 2.97287969e+04,
                     2.22553342e+04, 3.44846317e+04, 2.86417449e+04,
                     4.17316251e+04, 3.51640398e+04, 4.49927726e+04,
                     -1.19755028e+02, 1.76353792e+04, 1.42023139e+03],
                    [2.26321916e+03, 2.45820040e+03, 1.41829219e+03,
                     2.16573164e+03, 1.54828382e+03, 2.58819203e+03,
                     2.00324211e+03, 2.91316489e+03, 2.00324211e+03,
                     2.91316489e+03, 2.00324211e+03, 3.10814613e+03,
                     2.23072126e+03, 3.07564823e+03, 1.93824630e+03,
                     2.71817745e+03, 1.90574839e+03, 2.55569412e+03,
                     1.80826087e+03, 2.65318784e+03, 1.61327963e+03,
                     2.65318784e+03, 1.71076715e+03, 2.55569412e+03,
                     1.45079010e+03, 2.19822335e+03, 1.48328800e+03,
                     2.26321916e+03, 1.45079010e+03, 2.23072126e+03,
                     1.19081304e+03, 2.32821497e+03, 1.64577134e+03,
                     2.16573164e+03, 1.67826924e+03, 2.42570869e+03,
                     1.71076715e+03, 2.62068993e+03, 1.97074420e+03,
                     7.85273510e+03, 3.56310443e+03, 7.52776223e+03],
                    [2.03550300e+03, 1.09384681e+03, 1.29562799e+03,
                     1.02658428e+03, 1.49741558e+03, 1.29562799e+03,
                     1.69919676e+03, 1.63193423e+03, 1.90097794e+03,
                     1.49741558e+03, 2.03550300e+03, 1.80009055e+03,
                     2.17002165e+03, 1.86734667e+03, 1.96824047e+03,
                     1.59830296e+03, 1.96824047e+03, 1.46378431e+03,
                     1.69919676e+03, 1.39652178e+03, 1.63193423e+03,
                     1.22837187e+03, 1.63193423e+03, 1.09384681e+03,
                     1.32925925e+03, 1.16110934e+03, 1.29562799e+03,
                     1.06021554e+03, 1.29562799e+03, 8.92065629e+02,
                     1.12747807e+03, 8.92065629e+02, 1.49741558e+03,
                     1.09384681e+03, 1.39652178e+03, 1.12747807e+03,
                     1.69919676e+03, 1.39652178e+03, 1.76645929e+03,
                     7.04644610e+03, 3.38072154e+03, 5.56670249e+03],
                    [2.65620487e+03, 2.59010625e+03, 3.41632001e+03,
                     3.11888255e+03, 4.11034285e+03, 3.94509631e+03,
                     5.10179683e+03, 4.70521776e+03, 5.76277036e+03,
                     4.57302053e+03, 5.86191198e+03, 5.39923429e+03,
                     6.91947088e+03, 5.10179683e+03, 5.89496128e+03,
                     4.73826707e+03, 5.69667175e+03, 4.07729354e+03,
                     5.16789545e+03, 3.84595470e+03, 4.67216845e+03,
                     3.61461585e+03, 4.70521776e+03, 3.28412909e+03,
                     4.11034285e+03, 3.08583955e+03, 3.97814562e+03,
                     3.05279024e+03, 3.64765886e+03, 2.75535279e+03,
                     3.41632001e+03, 2.85449440e+03, 4.60606984e+03,
                     3.18498117e+03, 4.34168169e+03, 3.28412909e+03,
                     4.80435938e+03, 4.11034285e+03, 5.23399406e+03,
                     1.71975657e+04, 1.00921287e+04, 1.38266153e+04],
                    [3.49498634e+02, 1.84130952e+03, 4.46027611e+03,
                     4.62603077e+03, 8.07378329e+03, 8.10693549e+03,
                     1.14883805e+04, 9.96341421e+03, 1.34443126e+04,
                     1.05269857e+04, 1.40078873e+04, 1.26818311e+04,
                     1.68257607e+04, 1.31791014e+04, 1.54665523e+04,
                     1.20519520e+04, 1.49361298e+04, 1.05932901e+04,
                     1.29138901e+04, 1.02617745e+04, 1.19524986e+04,
                     9.63189857e+03, 1.26155267e+04, 8.17323355e+03,
                     1.07922001e+04, 8.60420578e+03, 1.00628645e+04,
                     7.77541985e+03, 9.93026201e+03, 7.51020860e+03,
                     9.26723074e+03, 7.57650667e+03, 1.13889239e+04,
                     8.60420578e+03, 1.09579548e+04, 9.03517169e+03,
                     1.24497720e+04, 1.07590479e+04, 1.41404929e+04,
                     2.02403579e+04, 2.03729635e+04, 1.53339467e+04]]

        self.poly.photoelectrons()

        self.assertTrue(np.allclose(self.poly.Nsc, knownNsc))

    def test_photon_fit_Photoelectrons_Nsc_Error_valuesAsExpected(self):
        knownNscError = [[204.71289996, 201.12716016, 219.37578279, 219.27010493,
                          191.89539375, 206.18756965, 211.20923969, 212.20315163,
                          208.53401113, 227.24157565, 230.74876055, 228.78298765,
                          214.18989508, 217.26001565, 252.84597275, 212.17491722,
                          225.67615691, 218.16967198, 265.96830649, 228.30430428,
                          255.37856167, 226.72672199, 245.91423535, 207.67200248,
                          226.13853833, 207.76515698, 229.26673161, 212.30517369,
                          243.0083243, 229.13215268, 245.56102918, 222.47260554,
                          190.31666003, 172.62911984, 214.43201902, 210.58053719,
                          251.16331732, 235.29089799, 249.25783133, 464.90659685,
                          429.38895199, 271.78606461],
                         [96.85603046, 97.31323983, 109.74742329, 126.22582367,
                          154.91359343, 187.56861117, 229.163089, 220.44050888,
                          258.32372895, 256.68634116, 305.65029411, 290.37569234,
                          344.81376147, 328.02380327, 384.94672249, 327.38701215,
                          371.50894438, 324.15079432, 375.36608401, 329.59286004,
                          361.40065568, 318.07534843, 360.56751632, 295.11334738,
                          333.17927142, 294.11517511, 331.69718161, 292.81819226,
                          334.13715557, 294.57513884, 327.71206648, 293.65451289,
                          310.51246862, 269.8535912, 330.78923831, 303.0132331,
                          363.46741895, 335.16848725, 376.57626725, 430.41069312,
                          358.74109816, 170.16231391],
                         [608.26334096, 608.81481457, 605.81351575, 608.0279917,
                          606.1447416, 609.20918964, 607.52184496, 610.16974125,
                          607.50560533, 610.16974125, 607.52184496, 610.73564759,
                          608.15245101, 610.592892, 607.26728247, 609.53855225,
                          607.13996429, 609.03368202, 606.85540961, 609.33342572,
                          606.31842255, 609.31723745, 606.57070334, 609.03368202,
                          605.7945651, 607.99286539, 605.90588657, 608.19845902,
                          605.82713256, 608.07133581, 605.0500436, 608.37155675,
                          606.38082489, 607.89817375, 606.4595039, 608.63921127,
                          606.57070334, 609.22273364, 607.3296054, 632.35545164,
                          613.26178498, 623.55179157],
                         [87.29374018, 67.23746923, 72.2612496, 65.71021239,
                          76.47982229, 72.2612496, 80.93191053, 79.55243323,
                          84.93589677, 76.7192396, 87.71288725, 83.28904592,
                          89.99790825, 84.28175547, 86.12288788, 78.8536453,
                          86.12288788, 75.75269607, 80.70499139, 74.27709238,
                          79.32156785, 70.32287705, 79.32156785, 67.37370795,
                          72.51912462, 68.86408192, 72.00701138, 66.40922386,
                          72.1342425, 62.102696, 67.92076465, 62.102696,
                          76.47982229, 66.96416028, 74.40044157, 68.05563551,
                          80.70499139, 74.15353801, 82.17675705, 184.53349581,
                          117.19622246, 139.77135063],
                         [100.52471208, 99.50159495, 112.08092669, 107.9744275,
                          120.86119172, 119.08840389, 133.27922137, 128.79144958,
                          140.86985127, 127.39577374, 142.31924328, 137.25707098,
                          153.11063904, 133.60238388, 142.19386904, 128.85384447,
                          139.64837583, 120.43713087, 133.59361994, 117.35244323,
                          127.72007189, 114.18445327, 128.1200294, 109.61230396,
                          120.64691464, 106.69431, 119.0110382, 106.29487523,
                          114.63156207, 101.95559507, 111.46361893, 103.36657814,
                          127.12008525, 108.04342598, 123.64944227, 109.5335898,
                          129.64545522, 120.86119172, 134.48570704, 310.71414456,
                          194.38419265, 213.43104148],
                         [52.16704011, 83.56993934, 121.09557489, 123.21354858,
                          157.18589531, 158.13460809, 186.21407021, 174.25972002,
                          200.59597609, 179.5796076, 205.3880647, 196.26017446,
                          223.40072351, 198.95036195, 214.1948098, 190.08428154,
                          210.12892067, 178.25310455, 195.88640061, 175.59597485,
                          188.84021174, 170.15540255, 193.5514558, 157.73079946,
                          179.69687532, 161.51012654, 173.89149579, 154.11278976,
                          172.80675308, 151.7048335, 167.23022705, 152.27149263,
                          184.90127956, 161.4612793, 181.08734916, 165.01183244,
                          192.86573329, 179.91806995, 204.88173048, 347.10654646,
                          274.07294646, 237.33449196]]

        self.poly.photoelectrons()

        self.assertTrue(np.allclose(self.poly.Nsc_error, knownNscError))

    def test_photon_fit_Photoelectrons_Nsc_fromIDL_valuesClose(self):
        NscIDL = np.genfromtxt('IDLNsc.csv', delimiter=',', dtype='float').transpose()

        self.poly.photoelectrons()

        self.assertTrue(np.allclose(self.poly.Nsc, NscIDL[0:6, 0:42], .0614))
        # 6,42 vs 6,43.  oh lawd.

    def load_args(self):
        return self.loadpickle('args')

    def load_data(self):
        SHOT = self.loadpickle('SHOT')
        calib = self.loadpickle('calib')
        calib_year = self.loadpickle('calib_year')
        nchannel = self.loadpickle('nchannel')
        param = self.loadpickle('param')
        times = self.loadpickle('times')
        vdac = self.loadpickle('vdac')
        voltage = self.loadpickle('voltage')
        scaling = self.loadpickle('scaling')
        ip_data = self.loadpickle('ip_data')
        ip_zeroes = self.loadpickle('ip_zeroes')
        return SHOT, calib, calib_year, nchannel, param, times, vdac, voltage, scaling, ip_data, ip_zeroes

    def loadpickle(self, varname):
        """
        :type varname: basestring
        """
        filename = (varname.lower() + '.pic')
        f = open(filename, 'rb')
        foo = pickle.load(f, encoding='iso-8859-1')
        f.close()
        return foo
