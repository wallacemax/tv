from unittest import TestCase
import pickle

import numpy as np

import shelf

__author__ = 'maxwallace'


class TestShelf(TestCase):
    poly = shelf.Shelf

    def setUp(self):
        self.poly = self.create_shelf(self.loadpickle('args'))
        self.poly.photoelectrons()

    def create_shelf(self, args):
        """the routine that is multiprocessed, the true guts of the program"""
        # a list is passed since multiprocessing.pool only accepts a single argument per processes
        shelf_id, SHOT, param, calib, voltage, vdac, times = args
        poly = shelf.Shelf(shelf_id, SHOT, param, calib, voltage, vdac, times)
        return poly

    def test_photon_fit_Ne_valuesAsExpected(self):
        knownNe = [3.97988057e+12, 4.11835281e+12, 5.58449743e+12,
                   6.40817706e+12, 9.19949227e+12, 1.10746767e+13,
                   1.39967603e+13, 1.43354654e+13, 1.66479582e+13,
                   1.59293090e+13, 1.96541527e+13, 2.00978410e+13,
                   2.39626552e+13, 2.32517587e+13, 2.69264436e+13,
                   2.26802328e+13, 2.52800592e+13, 2.17260446e+13,
                   2.55272835e+13, 2.20264548e+13, 2.34591488e+13,
                   2.05990239e+13, 2.35990964e+13, 1.74606725e+13,
                   1.98292599e+13, 1.75320991e+13, 1.93718237e+13,
                   1.71432204e+13, 1.95083539e+13, 1.69346191e+13,
                   1.89623989e+13, 1.70500039e+13, 1.80182366e+13,
                   1.53638005e+13, 1.98079839e+13, 1.88804488e+13,
                   2.37843675e+13, 2.30203964e+13, 2.54769258e+13,
                   3.12058832e+13, 2.40031135e+13, 2.44984516e+13]
        self.poly.photon_fit()

        self.assertTrue(np.allclose(self.poly.ne, knownNe))

    def test_photon_fit_Ne_error_valuesAsExpected(self):
        knownNe_error = [2.11227220e+11, 1.86210242e+11, 3.06474335e+11,
                         3.54638815e+11, 2.19072064e+11, 6.32862269e+11,
                         8.20374247e+11, 5.91668305e+11, 5.43931758e+11,
                         6.04540070e+11, 5.67031123e+11, 6.01230973e+11,
                         7.76371648e+11, 4.27578895e+11, 5.86317254e+11,
                         5.18568977e+11, 4.99883779e+11, 4.69643707e+11,
                         7.30810591e+11, 4.26678379e+11, 5.77200134e+11,
                         4.20256075e+11, 4.54356043e+11, 4.81834660e+11,
                         4.79704137e+11, 2.93935396e+11, 5.29228665e+11,
                         4.23550805e+11, 3.57205869e+11, 3.80602000e+11,
                         4.22107811e+11, 4.52455140e+11, 4.88320842e+11,
                         2.85027967e+11, 5.38248252e+11, 3.38958995e+11,
                         5.36362992e+11, 5.00059298e+11, 5.04157547e+11,
                         3.41652845e+12, 7.23113437e+11, 1.92266278e+12]
        self.poly.photon_fit()

        self.assertTrue(np.allclose(self.poly.ne_error, knownNe_error))

    def test_photon_fit_Te_valuesAsExpected(self):
        knownTe = [0.01482608, 0.04693883, 0.07952711, 0.13255483, 0.19272205,
                   0.27245635, 0.31518656, 0.31813617, 0.36190176, 0.41702812,
                   0.47470818, 0.46878968, 0.56646724, 0.68485457, 0.95937591,
                   0.81477321, 0.8994289, 0.99806146, 1.25236959, 1.10766692,
                   1.21275341, 1.16588101, 1.15755014, 1.06352596, 1.09668084,
                   1.07304799, 1.14706717, 1.14334928, 1.28352763, 1.3785052,
                   1.37833247, 1.29647209, 0.73493836, 0.76650927, 1.01987109,
                   1.10760717, 1.1420678, 1.1262104, 1.07685441, 0.0632094,
                   0.24434756, 0.07132272]
        self.poly.photon_fit()

        self.assertTrue(np.allclose(self.poly.Te, knownTe))

    def test_photon_fit_Te_error_valuesAsExpected(self):
        knownTe_error = [0.00087947, 0.0031695, 0.00660954, 0.00850789, 0.00416641,
                         0.02108479, 0.02668821, 0.01846838, 0.0154779, 0.02176412,
                         0.01429641, 0.01562843, 0.01569309, 0.0068087, 0.01449045,
                         0.01304054, 0.01076518, 0.0152891, 0.03343677, 0.01393408,
                         0.02544942, 0.01705251, 0.01465602, 0.02511195, 0.02126247,
                         0.00819722, 0.02734183, 0.02367624, 0.01496886, 0.02672297,
                         0.02615037, 0.03179662, 0.01524802, 0.00794177, 0.02279461,
                         0.01125635, 0.02003201, 0.01835617, 0.01399347, 0.01202627,
                         0.00845562, 0.00669983]

        self.poly.photon_fit()

        self.assertTrue(np.allclose(self.poly.Te_error, knownTe_error))

    def test_photon_fit_Pe_valuesAsExpected(self):
        knownPe = [0.00945276, 0.03096837, 0.07114785, 0.13607946, 0.2840258,
                   0.48338203, 0.70673684, 0.73061293, 0.96519305, 1.06420377,
                   1.49466392, 1.50935001, 2.17456429, 2.55103653, 4.13837951,
                   2.96037524, 3.64256605, 3.47376522, 5.12152889, 3.90855567,
                   4.55771605, 3.84736493, 4.3762054, 2.97489452, 3.48376838,
                   3.01380793, 3.55976943, 3.14003033, 4.01132971, 3.73978257,
                   4.18706572, 3.54119763, 2.12141538, 1.88659459, 3.23629475,
                   3.35012169, 4.3515703, 4.15331473, 4.39507736, 0.31599534,
                   0.93958936, 0.27991685]

        self.poly.photon_fit()

        self.assertTrue(np.allclose(self.poly.Pe, knownPe))

    def test_photon_fit_Pe_error_valuesAsExpected(self):
        knownPe_error = [0.0007524, 0.00251662, 0.00708596, 0.0115325, 0.0091351,
                         0.0465013, 0.07278043, 0.05204036, 0.05194693, 0.06867177,
                         0.06233544, 0.06760692, 0.09269845, 0.05332818, 0.10966884,
                         0.08262273, 0.08419445, 0.09203471, 0.20048829, 0.09027753,
                         0.14738721, 0.09658031, 0.10084181, 0.10804367, 0.10800441,
                         0.05552618, 0.12906431, 0.10122541, 0.08708187, 0.11099739,
                         0.12246529, 0.12795977, 0.07240657, 0.04008839, 0.11386664,
                         0.06911235, 0.12432145, 0.1127932, 0.10404923, 0.06936497,
                         0.04310926, 0.03426368]

        self.poly.photon_fit()

        self.assertTrue(np.allclose(self.poly.Pe_error, knownPe_error))

    def test_photon_fit_Photoelectrons_Nsc_valuesAsExpected(self):
        knownNsc = [[4.20055995e+01, -2.31913686e+01, -2.31913686e+01,
                     -1.53572870e+02, 1.07202567e+02, -1.53572870e+02,
                     4.20055995e+01, 2.37596503e+02, 7.59159813e+02,
                     8.89553749e+02, 2.06306187e+03, 1.80228643e+03,
                     4.21451207e+03, 5.58362353e+03, 1.42546213e+04,
                     7.80027070e+03, 1.20379741e+04, 1.07992566e+04,
                     2.07089719e+04, 1.28855223e+04, 1.81011554e+04,
                     1.31462977e+04, 1.69928318e+04, 9.62574850e+03,
                     1.30811008e+04, 9.88652394e+03, 1.36678610e+04,
                     1.05384812e+04, 1.63408746e+04, 1.37982550e+04,
                     1.71884227e+04, 1.25595375e+04, 5.77921443e+03,
                     4.67089085e+03, 1.16468048e+04, 1.09948475e+04,
                     1.67320439e+04, 1.38634519e+04, 1.64060715e+04,
                     -8.83883366e+01, 6.28765877e+02, -3.49163774e+02],
                    [-2.91655587e+01, 1.61291759e+01, 3.78478414e+02,
                     1.60141033e+03, 4.90784820e+03, 8.25958081e+03,
                     1.40118825e+04, 1.26530750e+04, 1.87677217e+04,
                     1.78618443e+04, 2.70111733e+04, 2.38406153e+04,
                     3.62510875e+04, 3.26275908e+04, 4.65327547e+04,
                     3.30805295e+04, 4.37245459e+04, 3.27181803e+04,
                     4.47663032e+04, 3.39864026e+04, 4.13239812e+04,
                     3.16311282e+04, 4.12786864e+04, 2.69205838e+04,
                     3.49375704e+04, 2.67394092e+04, 3.45299265e+04,
                     2.64223547e+04, 3.50734503e+04, 2.68299987e+04,
                     3.37599333e+04, 2.66488241e+04, 2.97287969e+04,
                     2.22553342e+04, 3.44846317e+04, 2.86417449e+04,
                     4.17316251e+04, 3.51640398e+04, 4.49927726e+04,
                     -1.19755028e+02, 1.76353792e+04, 1.42023139e+03],
                    [2.26321916e+03, 2.45820040e+03, 1.41829219e+03,
                     2.16573164e+03, 1.54828382e+03, 2.58819203e+03,
                     2.00324211e+03, 2.91316489e+03, 2.00324211e+03,
                     2.91316489e+03, 2.00324211e+03, 3.10814613e+03,
                     2.23072126e+03, 3.07564823e+03, 1.93824630e+03,
                     2.71817745e+03, 1.90574839e+03, 2.55569412e+03,
                     1.80826087e+03, 2.65318784e+03, 1.61327963e+03,
                     2.65318784e+03, 1.71076715e+03, 2.55569412e+03,
                     1.45079010e+03, 2.19822335e+03, 1.48328800e+03,
                     2.26321916e+03, 1.45079010e+03, 2.23072126e+03,
                     1.19081304e+03, 2.32821497e+03, 1.64577134e+03,
                     2.16573164e+03, 1.67826924e+03, 2.42570869e+03,
                     1.71076715e+03, 2.62068993e+03, 1.97074420e+03,
                     7.85273510e+03, 3.56310443e+03, 7.52776223e+03],
                    [2.03550300e+03, 1.09384681e+03, 1.29562799e+03,
                     1.02658428e+03, 1.49741558e+03, 1.29562799e+03,
                     1.69919676e+03, 1.63193423e+03, 1.90097794e+03,
                     1.49741558e+03, 2.03550300e+03, 1.80009055e+03,
                     2.17002165e+03, 1.86734667e+03, 1.96824047e+03,
                     1.59830296e+03, 1.96824047e+03, 1.46378431e+03,
                     1.69919676e+03, 1.39652178e+03, 1.63193423e+03,
                     1.22837187e+03, 1.63193423e+03, 1.09384681e+03,
                     1.32925925e+03, 1.16110934e+03, 1.29562799e+03,
                     1.06021554e+03, 1.29562799e+03, 8.92065629e+02,
                     1.12747807e+03, 8.92065629e+02, 1.49741558e+03,
                     1.09384681e+03, 1.39652178e+03, 1.12747807e+03,
                     1.69919676e+03, 1.39652178e+03, 1.76645929e+03,
                     7.04644610e+03, 3.38072154e+03, 5.56670249e+03],
                    [2.65620487e+03, 2.59010625e+03, 3.41632001e+03,
                     3.11888255e+03, 4.11034285e+03, 3.94509631e+03,
                     5.10179683e+03, 4.70521776e+03, 5.76277036e+03,
                     4.57302053e+03, 5.86191198e+03, 5.39923429e+03,
                     6.91947088e+03, 5.10179683e+03, 5.89496128e+03,
                     4.73826707e+03, 5.69667175e+03, 4.07729354e+03,
                     5.16789545e+03, 3.84595470e+03, 4.67216845e+03,
                     3.61461585e+03, 4.70521776e+03, 3.28412909e+03,
                     4.11034285e+03, 3.08583955e+03, 3.97814562e+03,
                     3.05279024e+03, 3.64765886e+03, 2.75535279e+03,
                     3.41632001e+03, 2.85449440e+03, 4.60606984e+03,
                     3.18498117e+03, 4.34168169e+03, 3.28412909e+03,
                     4.80435938e+03, 4.11034285e+03, 5.23399406e+03,
                     1.71975657e+04, 1.00921287e+04, 1.38266153e+04],
                    [3.49498634e+02, 1.84130952e+03, 4.46027611e+03,
                     4.62603077e+03, 8.07378329e+03, 8.10693549e+03,
                     1.14883805e+04, 9.96341421e+03, 1.34443126e+04,
                     1.05269857e+04, 1.40078873e+04, 1.26818311e+04,
                     1.68257607e+04, 1.31791014e+04, 1.54665523e+04,
                     1.20519520e+04, 1.49361298e+04, 1.05932901e+04,
                     1.29138901e+04, 1.02617745e+04, 1.19524986e+04,
                     9.63189857e+03, 1.26155267e+04, 8.17323355e+03,
                     1.07922001e+04, 8.60420578e+03, 1.00628645e+04,
                     7.77541985e+03, 9.93026201e+03, 7.51020860e+03,
                     9.26723074e+03, 7.57650667e+03, 1.13889239e+04,
                     8.60420578e+03, 1.09579548e+04, 9.03517169e+03,
                     1.24497720e+04, 1.07590479e+04, 1.41404929e+04,
                     2.02403579e+04, 2.03729635e+04, 1.53339467e+04]]

        self.poly.photoelectrons()

        self.assertTrue(np.allclose(self.poly.Nsc, knownNsc))

    def test_photon_fit_Photoelectrons_Nsc_Error_valuesAsExpected(self):
        knownNscError = [[204.71289996, 201.12716016, 219.37578279, 219.27010493,
                          191.89539375, 206.18756965, 211.20923969, 212.20315163,
                          208.53401113, 227.24157565, 230.74876055, 228.78298765,
                          214.18989508, 217.26001565, 252.84597275, 212.17491722,
                          225.67615691, 218.16967198, 265.96830649, 228.30430428,
                          255.37856167, 226.72672199, 245.91423535, 207.67200248,
                          226.13853833, 207.76515698, 229.26673161, 212.30517369,
                          243.0083243, 229.13215268, 245.56102918, 222.47260554,
                          190.31666003, 172.62911984, 214.43201902, 210.58053719,
                          251.16331732, 235.29089799, 249.25783133, 464.90659685,
                          429.38895199, 271.78606461],
                         [96.85603046, 97.31323983, 109.74742329, 126.22582367,
                          154.91359343, 187.56861117, 229.163089, 220.44050888,
                          258.32372895, 256.68634116, 305.65029411, 290.37569234,
                          344.81376147, 328.02380327, 384.94672249, 327.38701215,
                          371.50894438, 324.15079432, 375.36608401, 329.59286004,
                          361.40065568, 318.07534843, 360.56751632, 295.11334738,
                          333.17927142, 294.11517511, 331.69718161, 292.81819226,
                          334.13715557, 294.57513884, 327.71206648, 293.65451289,
                          310.51246862, 269.8535912, 330.78923831, 303.0132331,
                          363.46741895, 335.16848725, 376.57626725, 430.41069312,
                          358.74109816, 170.16231391],
                         [608.26334096, 608.81481457, 605.81351575, 608.0279917,
                          606.1447416, 609.20918964, 607.52184496, 610.16974125,
                          607.50560533, 610.16974125, 607.52184496, 610.73564759,
                          608.15245101, 610.592892, 607.26728247, 609.53855225,
                          607.13996429, 609.03368202, 606.85540961, 609.33342572,
                          606.31842255, 609.31723745, 606.57070334, 609.03368202,
                          605.7945651, 607.99286539, 605.90588657, 608.19845902,
                          605.82713256, 608.07133581, 605.0500436, 608.37155675,
                          606.38082489, 607.89817375, 606.4595039, 608.63921127,
                          606.57070334, 609.22273364, 607.3296054, 632.35545164,
                          613.26178498, 623.55179157],
                         [87.29374018, 67.23746923, 72.2612496, 65.71021239,
                          76.47982229, 72.2612496, 80.93191053, 79.55243323,
                          84.93589677, 76.7192396, 87.71288725, 83.28904592,
                          89.99790825, 84.28175547, 86.12288788, 78.8536453,
                          86.12288788, 75.75269607, 80.70499139, 74.27709238,
                          79.32156785, 70.32287705, 79.32156785, 67.37370795,
                          72.51912462, 68.86408192, 72.00701138, 66.40922386,
                          72.1342425, 62.102696, 67.92076465, 62.102696,
                          76.47982229, 66.96416028, 74.40044157, 68.05563551,
                          80.70499139, 74.15353801, 82.17675705, 184.53349581,
                          117.19622246, 139.77135063],
                         [100.52471208, 99.50159495, 112.08092669, 107.9744275,
                          120.86119172, 119.08840389, 133.27922137, 128.79144958,
                          140.86985127, 127.39577374, 142.31924328, 137.25707098,
                          153.11063904, 133.60238388, 142.19386904, 128.85384447,
                          139.64837583, 120.43713087, 133.59361994, 117.35244323,
                          127.72007189, 114.18445327, 128.1200294, 109.61230396,
                          120.64691464, 106.69431, 119.0110382, 106.29487523,
                          114.63156207, 101.95559507, 111.46361893, 103.36657814,
                          127.12008525, 108.04342598, 123.64944227, 109.5335898,
                          129.64545522, 120.86119172, 134.48570704, 310.71414456,
                          194.38419265, 213.43104148],
                         [52.16704011, 83.56993934, 121.09557489, 123.21354858,
                          157.18589531, 158.13460809, 186.21407021, 174.25972002,
                          200.59597609, 179.5796076, 205.3880647, 196.26017446,
                          223.40072351, 198.95036195, 214.1948098, 190.08428154,
                          210.12892067, 178.25310455, 195.88640061, 175.59597485,
                          188.84021174, 170.15540255, 193.5514558, 157.73079946,
                          179.69687532, 161.51012654, 173.89149579, 154.11278976,
                          172.80675308, 151.7048335, 167.23022705, 152.27149263,
                          184.90127956, 161.4612793, 181.08734916, 165.01183244,
                          192.86573329, 179.91806995, 204.88173048, 347.10654646,
                          274.07294646, 237.33449196]]

        self.poly.photoelectrons()

        self.assertTrue(np.allclose(self.poly.Nsc_error, knownNscError))

    def test_photon_fit_Photoelectrons_Nsc_fromIDL_valuesClose(self):
        NscIDL = np.genfromtxt('IDLNsc.csv', delimiter=',', dtype='float').transpose()

        self.poly.photoelectrons()

        self.assertTrue(np.allclose(self.poly.Nsc, NscIDL[0:6, 0:42], .0614))
        # 6,42 vs 6,43.  oh lawd.

    def test_photon_fit_ChiSquare_ValuesAsExpected(self):
        knownChisq = [0.68706292, 0.72618396, 1.46113445, 1.62324086, 0.24400004, 2.37364965
            , 2.76442329, 1.25776602, 0.76662883, 1.11195639, 0.59764071, 0.64669375
            , 0.86373795, 0.12203144, 0.30876817, 0.33789407, 0.20095841, 0.29185612
            , 0.80067941, 0.18737132, 0.50304018, 0.24035316, 0.19004288, 0.64007157
            , 0.45120531, 0.06647513, 0.66081047, 0.46894491, 0.14574835, 0.36073683
            , 0.36250815, 0.6044415, 0.5566922, 0.12539711, 0.62767678, 0.11812117
            , 0.36812528, 0.31135292, 0.21379646, 6.91846923, 0.57207934, 3.63122182]

        self.poly.photon_fit()

        self.assertTrue(np.allclose(self.poly.chisq, knownChisq))

    def test_tsspectra_ValuesAsExpected(self):
        knownSc = [1.00075478e-17, 1.31439470e-17, 1.72408393e-17, 2.25850999e-17
            , 2.95473784e-17, 3.86057083e-17, 5.03751543e-17, 6.56488493e-17
            , 8.54437542e-17, 1.11065265e-16, 1.44186024e-16, 1.86944111e-16
            , 2.42079137e-16, 3.13080901e-16, 4.04400443e-16, 5.21704631e-16
            , 6.72190843e-16, 8.65024167e-16, 9.80833121e-16, 1.11180443e-15
            , 1.42723408e-15, 1.82991449e-15, 2.34335065e-15, 2.99717126e-15
            , 3.38808539e-15, 3.82883077e-15, 4.88537571e-15, 6.22599866e-15
            , 7.92503882e-15, 1.00756267e-14, 1.13557771e-14, 1.27947928e-14
            , 1.62286313e-14, 2.05598527e-14, 2.60165425e-14, 3.28827162e-14
            , 3.69521662e-14, 4.15132023e-14, 5.23482581e-14, 6.59352490e-14
            , 8.29534478e-14, 1.04244838e-13, 1.16808419e-13, 1.30850421e-13
            , 1.64061895e-13, 2.05470478e-13, 2.57040858e-13, 3.21194289e-13
            , 3.58892081e-13, 4.00906954e-13, 4.99851237e-13, 6.22524600e-13
            , 1.07238763e-12, 1.83473783e-12, 3.11788979e-12, 5.26297303e-12
            , 8.82514441e-12, 1.47011542e-11, 2.43307627e-11, 4.00085566e-11
            , 6.53698930e-11, 1.06132441e-10, 1.71237160e-10, 2.74564705e-10
            , 4.37543653e-10, 6.93018764e-10, 1.09105809e-09, 1.70744442e-09
            , 2.65627270e-09, 4.10814695e-09, 6.31664213e-09, 9.65659417e-09
            , 1.46782651e-08, 2.21854470e-08, 3.33441496e-08, 4.98377086e-08
            , 7.40795620e-08, 1.09513818e-07, 1.61021641e-07, 2.35489728e-07
            , 3.42567698e-07, 4.95717764e-07, 7.13592415e-07, 1.02192706e-06
            , 1.45598619e-06, 2.06389654e-06, 2.91090666e-06, 4.08502431e-06
            , 5.70442317e-06, 7.92670380e-06, 1.09612845e-05, 1.50845038e-05
            , 2.06597424e-05, 2.81616613e-05, 3.82070686e-05, 5.15951795e-05
            , 6.93532179e-05, 9.27968700e-05, 1.23600831e-04, 1.63891830e-04
            , 2.16347932e-04, 2.84330949e-04, 3.72034452e-04, 4.84679891e-04
            , 6.28710826e-04, 8.12057307e-04, 1.04442620e-03, 1.33762812e-03
            , 1.70601629e-03, 2.16686535e-03, 2.74092105e-03, 3.45293037e-03
            , 4.33239674e-03, 5.41412389e-03, 6.73910144e-03, 8.35526323e-03
            , 1.03186738e-02, 1.26941427e-02, 1.55565144e-02, 1.89915681e-02
            , 2.30977213e-02, 2.79864021e-02, 3.37837416e-02, 4.06316218e-02
            , 4.21409247e-02, 4.36995872e-02, 4.53096017e-02, 4.69720814e-02
            , 4.86884688e-02, 5.04602365e-02, 5.22888874e-02, 5.41759549e-02
            , 5.61230034e-02, 5.81316286e-02, 6.02034574e-02, 6.23401485e-02
            , 6.45433925e-02, 6.68149122e-02, 6.91564626e-02, 7.15698315e-02
            , 7.40568394e-02, 7.66193397e-02, 7.92592191e-02, 8.19783973e-02
            , 8.47788277e-02, 8.76624971e-02, 9.06308374e-02, 9.36870627e-02
            , 9.68326892e-02, 1.00069839e-01, 1.03400668e-01, 1.06827365e-01
            , 1.10352155e-01, 1.13977295e-01, 1.17705077e-01, 1.21537825e-01
            , 1.25477899e-01, 1.29527692e-01, 1.33689630e-01, 1.37966171e-01
            , 1.42359810e-01, 1.46873072e-01, 1.51508515e-01, 1.56268730e-01
            , 1.61156341e-01, 1.66174004e-01, 1.71324404e-01, 1.76609215e-01
            , 1.82033251e-01, 1.87598272e-01, 1.93307087e-01, 1.99162537e-01
            , 2.05167491e-01, 2.11324844e-01, 2.17637524e-01, 2.24108483e-01
            , 2.30740701e-01, 2.37537184e-01, 2.44500964e-01, 2.51635098e-01
            , 2.58942666e-01, 2.66426773e-01, 2.74090545e-01, 2.81937132e-01
            , 3.24022162e-01, 3.71162322e-01, 4.23768382e-01, 4.82258363e-01
            , 5.47051832e-01, 6.18562308e-01, 6.97203557e-01, 7.83367252e-01
            , 8.77427872e-01, 9.79729551e-01, 1.09059579e+00, 1.21029871e+00
            , 1.33906787e+00, 1.47707400e+00, 1.62444428e+00, 1.78122352e+00
            , 1.94738938e+00, 2.12283456e+00, 2.30738974e+00, 2.50077830e+00
            , 2.70264016e+00, 2.91252284e+00, 3.12987166e+00, 3.35406403e+00
            , 3.58435959e+00, 3.81993648e+00, 4.05987721e+00, 4.30321142e+00
            , 4.35219197e+00, 4.40125670e+00, 4.45039665e+00, 4.49960276e+00
            , 4.54886587e+00, 4.59817673e+00, 4.64752599e+00, 4.69690421e+00
            , 4.74630186e+00, 4.79570932e+00, 4.84511691e+00, 4.89451484e+00
            , 4.94389327e+00, 4.99323265e+00, 5.04254225e+00, 5.09180240e+00
            , 5.14100297e+00, 5.19013378e+00, 5.23918461e+00, 5.28814519e+00
            , 5.53123135e+00, 5.77049680e+00, 6.00461380e+00, 6.23227984e+00
            , 6.45217558e+00, 6.66301471e+00, 6.86354769e+00, 7.05256736e+00
            , 7.08889069e+00, 7.12469924e+00, 7.15998435e+00, 7.19473750e+00
            , 7.22895027e+00, 7.26261441e+00, 7.29572178e+00, 7.32826439e+00
            , 7.36023437e+00, 7.39162404e+00, 7.42242582e+00, 7.45263231e+00
            , 7.48223625e+00, 7.51123055e+00, 7.53960827e+00, 7.56736263e+00
            , 7.59448179e+00, 7.62096991e+00, 7.64681535e+00, 7.67201202e+00
            , 7.69655400e+00, 7.72043554e+00, 7.74365108e+00, 7.76619523e+00
            , 7.78806279e+00, 7.80924877e+00, 7.82974832e+00, 7.84955682e+00
            , 7.86866982e+00, 7.88708307e+00, 7.90479251e+00, 7.92179429e+00
            , 7.93808474e+00, 7.95366040e+00, 7.96851801e+00, 7.98265449e+00
            , 7.99606698e+00, 8.00875282e+00, 8.02070730e+00, 8.03193283e+00
            , 8.04242494e+00, 8.05218181e+00, 8.06120178e+00, 8.06948342e+00
            , 8.07702550e+00, 8.08382700e+00, 8.08988710e+00, 8.09520519e+00
            , 8.09978086e+00, 8.10361390e+00, 8.10670433e+00, 8.10905234e+00
            , 8.11065835e+00, 8.11152296e+00, 8.11164700e+00, 8.11103148e+00
            , 8.10967761e+00, 8.10758681e+00, 8.10476070e+00, 8.10120185e+00
            , 8.09691087e+00, 8.09189060e+00, 8.08614341e+00, 8.07967191e+00
            , 8.07247886e+00, 8.06456723e+00, 8.05594016e+00, 8.04660099e+00
            , 8.03655323e+00, 8.02580058e+00, 8.01434692e+00, 8.00219628e+00
            , 7.98935291e+00, 7.97582118e+00, 7.96160568e+00, 7.94671113e+00
            , 7.93114244e+00, 7.91490465e+00, 7.89800299e+00, 7.88044284e+00
            , 7.86223334e+00, 7.84337306e+00, 7.82387132e+00, 7.80373411e+00
            , 7.78296753e+00, 7.76157784e+00, 7.73957144e+00, 7.71695487e+00
            , 7.69373476e+00, 7.66991792e+00]

        knownTe = 0.320097446155

        retSc = self.poly.ts_spectra(knownTe)

        self.assertTrue(np.allclose(retSc, knownSc))

    def test_tsspectra_alt_ValuesAsExpected(self):
        knownSc = [5.96561084e+19, 4.51015553e+19, 3.41426762e+19, 2.58807375e+19
            , 1.96438430e+19, 1.49294794e+19, 1.13614759e+19, 8.65730731e+18
            , 6.60529843e+18, 5.04616343e+18, 3.85999890e+18, 2.95646985e+18
            , 2.26728744e+18, 1.74096490e+18, 1.33850978e+18, 1.03038371e+18
            , 7.94192251e+17, 6.12898153e+17, 5.38669081e+17, 4.73576736e+17
            , 3.66378211e+17, 2.83794520e+17, 2.20095587e+17, 1.70905037e+17
            , 1.50668458e+17, 1.32868413e+17, 1.03422558e+17, 8.05996885e+16
            , 6.28888908e+16, 4.91292522e+16, 4.34425344e+16, 3.84254968e+16
            , 3.00895129e+16, 2.35898468e+16, 1.85160080e+16, 1.45507362e+16
            , 1.29045223e+16, 1.14478970e+16, 9.01722152e+15, 7.11089166e+15
            , 5.61406858e+15, 4.43743224e+15, 3.94685108e+15, 3.51147135e+15
            , 2.78187767e+15, 2.20638593e+15, 1.75193329e+15, 1.39265766e+15
            , 1.24221293e+15, 1.10831914e+15, 8.83013562e+14, 7.04295583e+14
            , 4.02099737e+14, 2.31157615e+14, 1.33795098e+14, 7.79669949e+13
            , 4.57386051e+13, 2.70108376e+13, 1.60560992e+13, 9.60662490e+12
            , 5.78489060e+12, 3.50586649e+12, 2.13814470e+12, 1.31220930e+12
            , 8.10326150e+11, 5.03489631e+11, 3.14747571e+11, 1.97951602e+11
            , 1.25241560e+11, 7.97096494e+10, 5.10301156e+10, 3.28597779e+10
            , 2.12818621e+10, 1.38621786e+10, 9.08061113e+09, 5.98178838e+09
            , 3.96245714e+09, 2.63928956e+09, 1.76759977e+09, 1.19022020e+09
            , 8.05754972e+08, 5.48382625e+08, 3.75193669e+08, 2.58042839e+08
            , 1.78393493e+08, 1.23962721e+08, 8.65788337e+07, 6.07749482e+07
            , 4.28750486e+07, 3.03975711e+07, 2.16572291e+07, 1.55054355e+07
            , 1.11547084e+07, 8.06325650e+06, 5.85636716e+06, 4.27349502e+06
            , 3.13302042e+06, 2.30755003e+06, 1.70739861e+06, 1.26907571e+06
            , 9.47539700e+05, 7.10637428e+05, 5.35337870e+05, 4.05052505e+05
            , 3.07813045e+05, 2.34930425e+05, 1.80074584e+05, 1.38616662e+05
            , 1.07152950e+05, 8.31778805e+04, 6.48353140e+04, 5.07463425e+04
            , 3.98808364e+04, 3.14687755e+04, 2.49308539e+04, 1.98301425e+04
            , 1.58352187e+04, 1.26946830e+04, 1.02165780e+04, 8.25400671e+03
            , 6.69390017e+03, 5.44927855e+03, 4.45277701e+03, 3.65209427e+03
            , 3.51169943e+03, 3.37722617e+03, 3.24835641e+03, 3.12486415e+03
            , 3.00650855e+03, 2.89306027e+03, 2.78430078e+03, 2.68002194e+03
            , 2.58002538e+03, 2.48412208e+03, 2.39213188e+03, 2.30388305e+03
            , 2.21921187e+03, 2.13796223e+03, 2.05998527e+03, 1.98513903e+03
            , 1.91328809e+03, 1.84430325e+03, 1.77806128e+03, 1.71444455e+03
            , 1.65334083e+03, 1.59464300e+03, 1.53825958e+03, 1.48407094e+03
            , 1.43199508e+03, 1.38194300e+03, 1.33382967e+03, 1.28757388e+03
            , 1.24309806e+03, 1.20032808e+03, 1.15919312e+03, 1.11962549e+03
            , 1.08156050e+03, 1.04493630e+03, 1.00969378e+03, 9.75776415e+02
            , 9.43130140e+02, 9.11703263e+02, 8.81446334e+02, 8.52312053e+02
            , 8.24255162e+02, 7.97232361e+02, 7.71202208e+02, 7.46129854e+02
            , 7.21967542e+02, 6.98683921e+02, 6.76244196e+02, 6.54615048e+02
            , 6.33764571e+02, 6.13662204e+02, 5.94278674e+02, 5.75585939e+02
            , 5.57557128e+02, 5.40166496e+02, 5.23389368e+02, 5.07202094e+02
            , 4.91582007e+02, 4.76507371e+02, 4.61957352e+02, 4.47911966e+02
            , 3.84612846e+02, 3.31361268e+02, 2.86429617e+02, 2.48405499e+02
            , 2.16132751e+02, 1.88663300e+02, 1.65213805e+02, 1.45140611e+02
            , 1.27910053e+02, 1.13079821e+02, 1.00280314e+02, 8.92048003e+01
            , 7.95962410e+01, 7.12394328e+01, 6.39525929e+01, 5.75834508e+01
            , 5.20031013e+01, 4.71025890e+01, 4.27889195e+01, 3.89835198e+01
            , 3.56192307e+01, 3.26386688e+01, 2.99927930e+01, 2.76392286e+01
            , 2.55418198e+01, 2.36693139e+01, 2.19947852e+01, 2.04947528e+01
            , 2.02138633e+01, 1.99389899e+01, 1.96699882e+01, 1.94067179e+01
            , 1.91490426e+01, 1.88968297e+01, 1.86499500e+01, 1.84082782e+01
            , 1.81716920e+01, 1.79400729e+01, 1.77133051e+01, 1.74912764e+01
            , 1.72738774e+01, 1.70610427e+01, 1.68525858e+01, 1.66484478e+01
            , 1.64485307e+01, 1.62527390e+01, 1.60609798e+01, 1.58731627e+01
            , 1.49902067e+01, 1.41935376e+01, 1.34742669e+01, 1.28245205e+01
            , 1.22374634e+01, 1.17070614e+01, 1.12280060e+01, 1.07956391e+01
            , 1.07143916e+01, 1.06348143e+01, 1.05568774e+01, 1.04805521e+01
            , 1.04058101e+01, 1.03326239e+01, 1.02609666e+01, 1.01908120e+01
            , 1.01221347e+01, 1.00549097e+01, 9.98911293e+00, 9.92472060e+00
            , 9.86170973e+00, 9.80005785e+00, 9.73974308e+00, 9.68074407e+00
            , 9.62305119e+00, 9.56662162e+00, 9.51144701e+00, 9.45750812e+00
            , 9.40478621e+00, 9.35326300e+00, 9.30292070e+00, 9.25374198e+00
            , 9.20570995e+00, 9.15880817e+00, 9.11302065e+00, 9.06833177e+00
            , 9.02472638e+00, 8.98218971e+00, 8.94070738e+00, 8.90026540e+00
            , 8.86085017e+00, 8.82244845e+00, 8.78504739e+00, 8.74863446e+00
            , 8.71319750e+00, 8.67872469e+00, 8.64521101e+00, 8.61263221e+00
            , 8.58098410e+00, 8.55025616e+00, 8.52043821e+00, 8.49152035e+00
            , 8.46349297e+00, 8.43634680e+00, 8.41007281e+00, 8.38466228e+00
            , 8.36010677e+00, 8.33639812e+00, 8.31352843e+00, 8.29149006e+00
            , 8.27027565e+00, 8.24987808e+00, 8.23029051e+00, 8.21150633e+00
            , 8.19351918e+00, 8.17632293e+00, 8.15991173e+00, 8.14428290e+00
            , 8.12942493e+00, 8.11533578e+00, 8.10201050e+00, 8.08944436e+00
            , 8.07763286e+00, 8.06657171e+00, 8.05625686e+00, 8.04668444e+00
            , 8.03785083e+00, 8.02975258e+00, 8.02238647e+00, 8.01574950e+00
            , 8.00983884e+00, 8.00465189e+00, 8.00018624e+00, 7.99643967e+00
            , 7.99341018e+00, 7.99109596e+00, 7.98949537e+00, 7.98860699e+00
            , 7.98842956e+00, 7.98896196e+00, 7.99020345e+00, 7.99215336e+00
            , 7.99481123e+00, 7.99817676e+00, 8.00224987e+00, 8.00703065e+00
            , 8.01251938e+00, 8.01871652e+00]

        knownTe = 0.320097446155

        retSc = self.poly.ts_spectra_alt(knownTe)

        self.assertTrue(np.allclose(retSc, knownSc))

    def test_ts_spectra_alt_param_1kev90d_ValuesAsExpected(self):
        knownSc = 4

        Te = 1
        scat_angle = 90
        qt =

        retSc = self.poly.ts_spectra_alt_param(Te, qt, scat_angle)

        self.assertTrue(np.allclose(retSc, knownSc))

    def load_args(self):
        return self.loadpickle('args')

    def load_data(self):
        SHOT = self.loadpickle('SHOT')
        calib = self.loadpickle('calib')
        calib_year = self.loadpickle('calib_year')
        nchannel = self.loadpickle('nchannel')
        param = self.loadpickle('param')
        times = self.loadpickle('times')
        vdac = self.loadpickle('vdac')
        voltage = self.loadpickle('voltage')
        scaling = self.loadpickle('scaling')
        ip_data = self.loadpickle('ip_data')
        ip_zeroes = self.loadpickle('ip_zeroes')
        return SHOT, calib, calib_year, nchannel, param, times, vdac, voltage, scaling, ip_data, ip_zeroes

    def loadpickle(self, varname):
        """
        :type varname: basestring
        """
        filename = (varname.lower() + '.pic')
        f = open(filename, 'rb')
        foo = pickle.load(f, encoding='iso-8859-1')
        f.close()
        return foo
